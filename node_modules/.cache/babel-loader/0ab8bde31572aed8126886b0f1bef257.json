{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\src\\\\TemperatureSlider.js\";\nimport React from \"react\";\n\nvar json = require(\"./ElementJSON\");\n\nvar $ = require(\"jquery\");\n\nvar TemperatureSlider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TemperatureSlider, _React$Component);\n\n  function TemperatureSlider(props) {\n    _classCallCheck(this, TemperatureSlider);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TemperatureSlider).call(this, props));\n  }\n\n  _createClass(TemperatureSlider, [{\n    key: \"_updateAtomicElementStatesFromSlider\",\n    value: function _updateAtomicElementStatesFromSlider() {\n      var temperature = $(\"#temperatureSlider\").val();\n      $(\"#temperatureInput\").val(temperature);\n\n      this._editStates(Number(temperature));\n    }\n  }, {\n    key: \"_updateAtomicElementStatesFromTextBox\",\n    value: function _updateAtomicElementStatesFromTextBox() {\n      var temperature = $(\"#temperatureInput\").val();\n      $(\"#temperatureSlider\").val(temperature);\n\n      this._editStates(Number(temperature));\n    }\n  }, {\n    key: \"_editStates\",\n    value: function _editStates(temperature) {\n      var elementData = json.elementJSON.data;\n\n      for (var elem in elementData) {\n        var elemDiv = $(\"#\" + elem);\n\n        var phaseState = this._computePhaseState(elem, elementData, temperature);\n\n        if (!elemDiv.hasClass(phaseState)) {\n          elemDiv.removeClass(\"gas liquid solid unknown\");\n          elemDiv.addClass(phaseState);\n        }\n      }\n    }\n  }, {\n    key: \"_computePhaseState\",\n    value: function _computePhaseState(elem, elementData, temperature) {\n      if (elementData[elem].boilingPoint != \"unknown\") {\n        if (elementData[elem].boilingPoint < temperature) {\n          return \"gas\";\n        }\n      }\n\n      if (elementData[elem].meltingPoint != \"unknown\") {\n        if (elementData[elem].meltingPoint < temperature) {\n          return \"liquid\";\n        } else {\n          return \"solid\";\n        }\n      }\n\n      return \"unknown\";\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"div\", {\n        className: \"tempSlider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sliderDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"temperatureSlider\",\n        className: \"slider floatLeft\",\n        type: \"range\",\n        min: \"0\",\n        max: \"9999\",\n        step: \"1\",\n        onChange: function onChange(event) {\n          return _this._updateAtomicElementStatesFromSlider();\n        },\n        onLoad: function onLoad(event) {\n          return $(\"#temperatureSlider\").val(273);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"textboxDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"temperatureInput\",\n        className: \"sliderTextbox floatRight\",\n        type: \"number\",\n        minLength: \"1\",\n        maxLength: \"4\",\n        onKeyUp: function onKeyUp(event) {\n          return _this._updateAtomicElementStatesFromTextBox();\n        },\n        onLoad: function onLoad(event) {\n          return $(\"#temperatureInput\").val(273);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"floatRight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"K\"))));\n    }\n  }]);\n\n  return TemperatureSlider;\n}(React.Component);\n\nexport default TemperatureSlider;","map":{"version":3,"sources":["C:\\Users\\alexh\\Desktop\\periodic-table\\src\\TemperatureSlider.js"],"names":["React","json","require","$","TemperatureSlider","props","temperature","val","_editStates","Number","elementData","elementJSON","data","elem","elemDiv","phaseState","_computePhaseState","hasClass","removeClass","addClass","boilingPoint","meltingPoint","event","_updateAtomicElementStatesFromSlider","_updateAtomicElementStatesFromTextBox","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,IAAIC,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;;IAEME,iB;;;;;AACF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA,0FACTA,KADS;AAElB;;;;2DAEsC;AACnC,UAAIC,WAAW,GAAGH,CAAC,CAAC,oBAAD,CAAD,CAAwBI,GAAxB,EAAlB;AACAJ,MAAAA,CAAC,CAAC,mBAAD,CAAD,CAAuBI,GAAvB,CAA2BD,WAA3B;;AAEA,WAAKE,WAAL,CAAiBC,MAAM,CAACH,WAAD,CAAvB;AACH;;;4DAEuC;AACpC,UAAIA,WAAW,GAAGH,CAAC,CAAC,mBAAD,CAAD,CAAuBI,GAAvB,EAAlB;AACAJ,MAAAA,CAAC,CAAC,oBAAD,CAAD,CAAwBI,GAAxB,CAA4BD,WAA5B;;AAEA,WAAKE,WAAL,CAAiBC,MAAM,CAACH,WAAD,CAAvB;AACH;;;gCAEWA,W,EAAa;AACrB,UAAII,WAAW,GAAGT,IAAI,CAACU,WAAL,CAAiBC,IAAnC;;AAEA,WAAK,IAAIC,IAAT,IAAiBH,WAAjB,EAA8B;AAC1B,YAAII,OAAO,GAAGX,CAAC,CAAC,MAAMU,IAAP,CAAf;;AACA,YAAIE,UAAU,GAAG,KAAKC,kBAAL,CAAwBH,IAAxB,EAA8BH,WAA9B,EAA2CJ,WAA3C,CAAjB;;AAEA,YAAI,CAACQ,OAAO,CAACG,QAAR,CAAiBF,UAAjB,CAAL,EAAmC;AAC/BD,UAAAA,OAAO,CAACI,WAAR,CAAoB,0BAApB;AACAJ,UAAAA,OAAO,CAACK,QAAR,CAAiBJ,UAAjB;AACH;AACJ;AACJ;;;uCAEkBF,I,EAAMH,W,EAAaJ,W,EAAa;AAC/C,UAAII,WAAW,CAACG,IAAD,CAAX,CAAkBO,YAAlB,IAAkC,SAAtC,EAAiD;AAC7C,YAAIV,WAAW,CAACG,IAAD,CAAX,CAAkBO,YAAlB,GAAiCd,WAArC,EAAkD;AAC9C,iBAAO,KAAP;AACH;AACJ;;AAED,UAAII,WAAW,CAACG,IAAD,CAAX,CAAkBQ,YAAlB,IAAkC,SAAtC,EAAiD;AAC7C,YAAIX,WAAW,CAACG,IAAD,CAAX,CAAkBQ,YAAlB,GAAiCf,WAArC,EAAkD;AAC9C,iBAAO,QAAP;AACH,SAFD,MAGK;AACD,iBAAO,OAAP;AACH;AACJ;;AAED,aAAO,SAAP;AACH;;;6BAEQ;AAAA;;AACL,aACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,EAAE,EAAC,mBAAV;AAA8B,QAAA,SAAS,EAAC,kBAAxC;AAA2D,QAAA,IAAI,EAAC,OAAhE;AAAwE,QAAA,GAAG,EAAC,GAA5E;AAAgF,QAAA,GAAG,EAAC,MAApF;AAA2F,QAAA,IAAI,EAAC,GAAhG;AACO,QAAA,QAAQ,EAAE,kBAACgB,KAAD;AAAA,iBAAW,KAAI,CAACC,oCAAL,EAAX;AAAA,SADjB;AAEO,QAAA,MAAM,EAAE,gBAACD,KAAD;AAAA,iBAAWnB,CAAC,CAAC,oBAAD,CAAD,CAAwBI,GAAxB,CAA4B,GAA5B,CAAX;AAAA,SAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAOI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,EAAE,EAAC,kBAAV;AAA6B,QAAA,SAAS,EAAC,0BAAvC;AAAkE,QAAA,IAAI,EAAC,QAAvE;AAAgF,QAAA,SAAS,EAAC,GAA1F;AAA8F,QAAA,SAAS,EAAC,GAAxG;AACO,QAAA,OAAO,EAAE,iBAACe,KAAD;AAAA,iBAAW,KAAI,CAACE,qCAAL,EAAX;AAAA,SADhB;AAEO,QAAA,MAAM,EAAE,gBAACF,KAAD;AAAA,iBAAWnB,CAAC,CAAC,mBAAD,CAAD,CAAuBI,GAAvB,CAA2B,GAA3B,CAAX;AAAA,SAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAKI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALJ,CAPJ,CADJ,CADJ;AAmBH;;;;EAxE2BP,KAAK,CAACyB,S;;AA2EtC,eAAerB,iBAAf","sourcesContent":["import React from \"react\";\r\n\r\n\r\nvar json = require(\"./ElementJSON\");\r\nvar $ = require(\"jquery\");\r\n\r\nclass TemperatureSlider extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    _updateAtomicElementStatesFromSlider() {\r\n        let temperature = $(\"#temperatureSlider\").val();\r\n        $(\"#temperatureInput\").val(temperature);\r\n\r\n        this._editStates(Number(temperature));\r\n    }\r\n\r\n    _updateAtomicElementStatesFromTextBox() {\r\n        let temperature = $(\"#temperatureInput\").val();\r\n        $(\"#temperatureSlider\").val(temperature);\r\n        \r\n        this._editStates(Number(temperature));\r\n    }\r\n\r\n    _editStates(temperature) {\r\n        let elementData = json.elementJSON.data;\r\n\r\n        for (let elem in elementData) {\r\n            let elemDiv = $(\"#\" + elem);\r\n            let phaseState = this._computePhaseState(elem, elementData, temperature);\r\n\r\n            if (!elemDiv.hasClass(phaseState)) {\r\n                elemDiv.removeClass(\"gas liquid solid unknown\");\r\n                elemDiv.addClass(phaseState);\r\n            }\r\n        }\r\n    }\r\n\r\n    _computePhaseState(elem, elementData, temperature) {\r\n        if (elementData[elem].boilingPoint != \"unknown\") {\r\n            if (elementData[elem].boilingPoint < temperature) {\r\n                return \"gas\";\r\n            }\r\n        }\r\n\r\n        if (elementData[elem].meltingPoint != \"unknown\") {\r\n            if (elementData[elem].meltingPoint < temperature) {\r\n                return \"liquid\";\r\n            }\r\n            else {\r\n                return \"solid\";\r\n            }\r\n        }\r\n\r\n        return \"unknown\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tempSlider\">\r\n                <form>\r\n                    <div className=\"sliderDiv\">\r\n                        <input id=\"temperatureSlider\" className=\"slider floatLeft\" type=\"range\" min=\"0\" max=\"9999\" step=\"1\"\r\n                               onChange={(event) => this._updateAtomicElementStatesFromSlider()}\r\n                               onLoad={(event) => $(\"#temperatureSlider\").val(273)} />\r\n                    </div>\r\n\r\n                    <div className=\"textboxDiv\">\r\n                        <input id=\"temperatureInput\" className=\"sliderTextbox floatRight\" type=\"number\" minLength=\"1\" maxLength=\"4\"\r\n                               onKeyUp={(event) => this._updateAtomicElementStatesFromTextBox()}\r\n                               onLoad={(event) => $(\"#temperatureInput\").val(273)} />\r\n\r\n                        <div className=\"floatRight\">K</div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default TemperatureSlider\r\n"]},"metadata":{},"sourceType":"module"}