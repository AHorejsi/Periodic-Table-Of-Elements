{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\src\\\\TemperatureSlider.js\";\nimport React from \"react\";\nimport $ from \"jquery\";\n\nvar TemperatureSlider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TemperatureSlider, _React$Component);\n\n  function TemperatureSlider(props) {\n    _classCallCheck(this, TemperatureSlider);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TemperatureSlider).call(this, props));\n  }\n\n  _createClass(TemperatureSlider, [{\n    key: \"_updateAtomicElementStatesFromSlider\",\n    value: function _updateAtomicElementStatesFromSlider(elementData) {\n      var temperature = $(\"#temperatureSlider\").val();\n      $(\"#temperatureInput\").val(temperature);\n      TemperatureSlider.editStates(Number(temperature), elementData);\n    }\n  }, {\n    key: \"_updateAtomicElementStatesFromTextBox\",\n    value: function _updateAtomicElementStatesFromTextBox(elementData) {\n      var temperature = $(\"#temperatureInput\").val();\n      $(\"#temperatureSlider\").val(temperature);\n      TemperatureSlider.editStates(Number(temperature), elementData);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"div\", {\n        id: \"temperatureDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        id: \"sliderSpan\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"temperatureSlider\",\n        className: \"slider floatLeft\",\n        type: \"range\",\n        min: \"0\",\n        max: \"9999\",\n        step: \"1\",\n        onChange: function onChange(event) {\n          return _this._updateAtomicElementStatesFromSlider(_this.props.json);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"temperatureInput\",\n        className: \"sliderTextbox centered floatRight\",\n        type: \"number\",\n        minLength: \"1\",\n        maxLength: \"4\",\n        onKeyUp: function onKeyUp(event) {\n          return _this._updateAtomicElementStatesFromTextBox(_this.props.json);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })));\n    }\n  }], [{\n    key: \"editStates\",\n    value: function editStates(temperature, elementData) {\n      for (var elem in elementData) {\n        var elemDiv = $(\"#\" + elem);\n\n        var phaseState = this._computePhaseState(elem, elementData, temperature);\n\n        if (!elemDiv.hasClass(phaseState)) {\n          elemDiv.removeClass(\"gas liquid solid unknown\");\n          elemDiv.addClass(phaseState);\n        }\n      }\n    }\n  }, {\n    key: \"_computePhaseState\",\n    value: function _computePhaseState(elem, elementData, temperature) {\n      if (elementData[elem].boilingPoint !== \"unknown\") {\n        if (elementData[elem].boilingPoint < temperature) {\n          return \"gas\";\n        }\n      }\n\n      if (elementData[elem].meltingPoint !== \"unknown\") {\n        if (elementData[elem].meltingPoint > temperature) {\n          return \"solid\";\n        } else {\n          return \"liquid\";\n        }\n      }\n\n      return \"unknown\";\n    }\n  }]);\n\n  return TemperatureSlider;\n}(React.Component);\n\nexport default TemperatureSlider;","map":{"version":3,"sources":["C:\\Users\\alexh\\Desktop\\periodic-table\\src\\TemperatureSlider.js"],"names":["React","$","TemperatureSlider","props","elementData","temperature","val","editStates","Number","event","_updateAtomicElementStatesFromSlider","json","_updateAtomicElementStatesFromTextBox","elem","elemDiv","phaseState","_computePhaseState","hasClass","removeClass","addClass","boilingPoint","meltingPoint","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nclass TemperatureSlider extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    _updateAtomicElementStatesFromSlider(elementData) {\r\n        let temperature = $(\"#temperatureSlider\").val();\r\n        $(\"#temperatureInput\").val(temperature);\r\n\r\n        TemperatureSlider.editStates(Number(temperature), elementData);\r\n    }\r\n\r\n    _updateAtomicElementStatesFromTextBox(elementData) {\r\n        let temperature = $(\"#temperatureInput\").val();\r\n        $(\"#temperatureSlider\").val(temperature);\r\n        \r\n        TemperatureSlider.editStates(Number(temperature), elementData);\r\n    }\r\n\r\n    static editStates(temperature, elementData) {\r\n        for (let elem in elementData) {\r\n            let elemDiv = $(\"#\" + elem);\r\n            let phaseState = this._computePhaseState(elem, elementData, temperature);\r\n\r\n            if (!elemDiv.hasClass(phaseState)) {\r\n                elemDiv.removeClass(\"gas liquid solid unknown\");\r\n                elemDiv.addClass(phaseState);\r\n            }\r\n        }\r\n    }\r\n\r\n    static _computePhaseState(elem, elementData, temperature) {\r\n        if (elementData[elem].boilingPoint !== \"unknown\") {\r\n            if (elementData[elem].boilingPoint < temperature) {\r\n                return \"gas\";\r\n            }\r\n        }\r\n\r\n        if (elementData[elem].meltingPoint !== \"unknown\") {\r\n            if (elementData[elem].meltingPoint > temperature) {\r\n                return \"solid\";\r\n            }\r\n            else {\r\n                return \"liquid\";\r\n            }\r\n        }\r\n\r\n        return \"unknown\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"temperatureDiv\">\r\n                <span id=\"sliderSpan\">\r\n                    <input id=\"temperatureSlider\" className=\"slider floatLeft\" type=\"range\" min=\"0\" max=\"9999\" step=\"1\"\r\n                           onChange={(event) => this._updateAtomicElementStatesFromSlider(this.props.json)} />\r\n                </span>\r\n                    \r\n                <span>\r\n                    <input id=\"temperatureInput\" className=\"sliderTextbox centered floatRight\" type=\"number\" minLength=\"1\" maxLength=\"4\"\r\n                           onKeyUp={(event) => this._updateAtomicElementStatesFromTextBox(this.props.json)} />\r\n                </span>\r\n            </div>\r\n        );        \r\n    }\r\n}\r\n\r\n\r\nexport default TemperatureSlider\r\n"]},"metadata":{},"sourceType":"module"}