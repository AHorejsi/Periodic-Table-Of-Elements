{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\src\\\\TemperatureSlider.js\";\nimport React from \"react\";\n\nvar elemJSON = require(\"./ElementJSON\").elementJSON;\n\nvar TemperatureSlider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TemperatureSlider, _React$Component);\n\n  function TemperatureSlider(props) {\n    _classCallCheck(this, TemperatureSlider);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TemperatureSlider).call(this, props));\n  }\n\n  _createClass(TemperatureSlider, [{\n    key: \"_updateAtomicElementStates\",\n    value: function _updateAtomicElementStates(event, eventSource) {\n      var temperature = this._findTemperatureAndUpdateSlider(eventSource);\n\n      for (var elem in elemJSON) {\n        var elemDiv = document.getElementById(elem);\n\n        var phaseState = this._computePhaseState(elem, temperature);\n\n        elemDiv.setAttribute(\"phase\", phaseState);\n      }\n    }\n  }, {\n    key: \"_findTemperatureAndUpdateSlider\",\n    value: function _findTemperatureAndUpdateSlider(eventSource) {\n      var temperature;\n\n      if (eventSource === UPDATED_FROM_TEXTBOX) {\n        temperature = document.getElementById(\"temperatureInput\").value;\n      } else {\n        temperature = document.getElementById(\"temperatureSlider\").value;\n      }\n\n      return temperature;\n    }\n  }, {\n    key: \"_computePhaseState\",\n    value: function _computePhaseState(elem, temperature) {\n      if (elem.boilingPoint !== \"unknown\") {\n        if (temperature > elem.boilingPoint) {\n          return \"gas\";\n        }\n      }\n\n      if (elem.meltingPoint !== \"unknown\") {\n        if (temperature < elem.meltingPoint) {\n          return \"solid\";\n        } else {\n          return \"liquid\";\n        }\n      }\n\n      return \"unknown\";\n    }\n  }, {\n    key: \"_switchPhaseStateRepresentation\",\n    value: function _switchPhaseStateRepresentation(event) {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"temperatureSlider\",\n        className: \"tempSlider\",\n        type: \"range\",\n        min: \"1\",\n        max: \"6000\",\n        value: \"0\",\n        onChange: function onChange(event) {\n          return _this._updateAtomicElementStates(event, UPDATED_FROM_SLIDER);\n        },\n        onClick: function onClick(event) {\n          return _this._switchPhaseStateRepresentation(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        id: \"temperatureInput\",\n        className: \"tempInput\",\n        type: \"text\",\n        value: \"0\",\n        maxLength: \"4\",\n        onKeyDown: function onKeyDown(event) {\n          return _this._updateAtomicElementStates(event, UPDATED_FROM_TEXTBOX);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TemperatureSlider;\n}(React.Component);\n\nexport default TemperatureSlider;","map":{"version":3,"sources":["C:\\Users\\alexh\\Desktop\\periodic-table\\src\\TemperatureSlider.js"],"names":["React","elemJSON","require","elementJSON","TemperatureSlider","props","event","eventSource","temperature","_findTemperatureAndUpdateSlider","elem","elemDiv","document","getElementById","phaseState","_computePhaseState","setAttribute","UPDATED_FROM_TEXTBOX","value","boilingPoint","meltingPoint","_updateAtomicElementStates","UPDATED_FROM_SLIDER","_switchPhaseStateRepresentation","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,WAAxC;;IAEMC,iB;;;;;AACF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA,0FACTA,KADS;AAElB;;;;+CAE0BC,K,EAAOC,W,EAAa;AAC3C,UAAIC,WAAW,GAAG,KAAKC,+BAAL,CAAqCF,WAArC,CAAlB;;AAEA,WAAK,IAAIG,IAAT,IAAiBT,QAAjB,EAA2B;AACvB,YAAIU,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwBH,IAAxB,CAAd;;AACA,YAAII,UAAU,GAAG,KAAKC,kBAAL,CAAwBL,IAAxB,EAA8BF,WAA9B,CAAjB;;AACAG,QAAAA,OAAO,CAACK,YAAR,CAAqB,OAArB,EAA8BF,UAA9B;AACH;AACJ;;;oDAE+BP,W,EAAa;AACzC,UAAIC,WAAJ;;AAEA,UAAID,WAAW,KAAKU,oBAApB,EAA0C;AACtCT,QAAAA,WAAW,GAAGI,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CK,KAA1D;AACH,OAFD,MAGK;AACDV,QAAAA,WAAW,GAAGI,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,EAA6CK,KAA3D;AACH;;AAED,aAAOV,WAAP;AACH;;;uCAEkBE,I,EAAMF,W,EAAa;AAClC,UAAIE,IAAI,CAACS,YAAL,KAAsB,SAA1B,EAAqC;AACjC,YAAIX,WAAW,GAAGE,IAAI,CAACS,YAAvB,EAAqC;AACjC,iBAAO,KAAP;AACH;AACJ;;AAED,UAAIT,IAAI,CAACU,YAAL,KAAsB,SAA1B,EAAqC;AACjC,YAAIZ,WAAW,GAAGE,IAAI,CAACU,YAAvB,EAAqC;AACjC,iBAAO,OAAP;AACH,SAFD,MAGK;AACD,iBAAO,QAAP;AACH;AACJ;;AAED,aAAO,SAAP;AACH;;;oDAE+Bd,K,EAAO,CAEtC;;;6BAEQ;AAAA;;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,EAAE,EAAC,mBAAV;AAA8B,QAAA,SAAS,EAAC,YAAxC;AAAqD,QAAA,IAAI,EAAC,OAA1D;AACI,QAAA,GAAG,EAAC,GADR;AACY,QAAA,GAAG,EAAC,MADhB;AACuB,QAAA,KAAK,EAAC,GAD7B;AAEI,QAAA,QAAQ,EAAE,kBAACA,KAAD;AAAA,iBAAW,KAAI,CAACe,0BAAL,CAAgCf,KAAhC,EAAuCgB,mBAAvC,CAAX;AAAA,SAFd;AAGI,QAAA,OAAO,EAAE,iBAAChB,KAAD;AAAA,iBAAW,KAAI,CAACiB,+BAAL,CAAqCjB,KAArC,CAAX;AAAA,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAKI;AAAO,QAAA,EAAE,EAAC,kBAAV;AAA6B,QAAA,SAAS,EAAC,WAAvC;AAAmD,QAAA,IAAI,EAAC,MAAxD;AACI,QAAA,KAAK,EAAC,GADV;AACc,QAAA,SAAS,EAAC,GADxB;AAEI,QAAA,SAAS,EAAE,mBAACA,KAAD;AAAA,iBAAW,KAAI,CAACe,0BAAL,CAAgCf,KAAhC,EAAuCW,oBAAvC,CAAX;AAAA,SAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADJ;AAWH;;;;EA/D2BjB,KAAK,CAACwB,S;;AAkEtC,eAAepB,iBAAf","sourcesContent":["import React from \"react\";\r\n\r\n\r\nvar elemJSON = require(\"./ElementJSON\").elementJSON;\r\n\r\nclass TemperatureSlider extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    _updateAtomicElementStates(event, eventSource) {\r\n        let temperature = this._findTemperatureAndUpdateSlider(eventSource);\r\n        \r\n        for (let elem in elemJSON) {\r\n            let elemDiv = document.getElementById(elem);\r\n            let phaseState = this._computePhaseState(elem, temperature);\r\n            elemDiv.setAttribute(\"phase\", phaseState);\r\n        }\r\n    }\r\n\r\n    _findTemperatureAndUpdateSlider(eventSource) {\r\n        let temperature;\r\n        \r\n        if (eventSource === UPDATED_FROM_TEXTBOX) {\r\n            temperature = document.getElementById(\"temperatureInput\").value;\r\n        }\r\n        else {\r\n            temperature = document.getElementById(\"temperatureSlider\").value;\r\n        }\r\n\r\n        return temperature;\r\n    }\r\n\r\n    _computePhaseState(elem, temperature) {\r\n        if (elem.boilingPoint !== \"unknown\") {\r\n            if (temperature > elem.boilingPoint) {\r\n                return \"gas\";\r\n            }\r\n        }\r\n\r\n        if (elem.meltingPoint !== \"unknown\") {\r\n            if (temperature < elem.meltingPoint) {\r\n                return \"solid\";\r\n            }\r\n            else {\r\n                return \"liquid\";\r\n            }\r\n        }\r\n\r\n        return \"unknown\";\r\n    }\r\n\r\n    _switchPhaseStateRepresentation(event) {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input id=\"temperatureSlider\" className=\"tempSlider\" type=\"range\"\r\n                    min=\"1\" max=\"6000\" value=\"0\"\r\n                    onChange={(event) => this._updateAtomicElementStates(event, UPDATED_FROM_SLIDER)}\r\n                    onClick={(event) => this._switchPhaseStateRepresentation(event)}/>\r\n                <input id=\"temperatureInput\" className=\"tempInput\" type=\"text\"\r\n                    value=\"0\" maxLength=\"4\"\r\n                    onKeyDown={(event) => this._updateAtomicElementStates(event, UPDATED_FROM_TEXTBOX)} />\r\n            </div>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default TemperatureSlider\r\n"]},"metadata":{},"sourceType":"module"}