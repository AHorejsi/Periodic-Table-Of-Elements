{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\alexh\\\\Desktop\\\\periodic-table\\\\src\\\\TemperatureSlider.js\";\nimport React from \"react\";\n\nvar elemJSON = require(\"./ElementJSON\").elementJSON;\n\nvar TemperatureSlider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TemperatureSlider, _React$Component);\n\n  function TemperatureSlider(props) {\n    _classCallCheck(this, TemperatureSlider);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TemperatureSlider).call(this, props));\n  }\n\n  _createClass(TemperatureSlider, [{\n    key: \"_updateAtomicElementStates\",\n    value: function _updateAtomicElementStates(idSource, idTarget) {\n      var temperature = document.getElementById(idSource).value;\n\n      if (idSource === \"temperatureInput\") {\n        this._checkTemperatureValue(temperature);\n      }\n\n      document.getElementById(idTarget).value = temperature;\n\n      this._editStates(temperature);\n    }\n  }, {\n    key: \"_checkTemperatureValue\",\n    value: function _checkTemperatureValue(temperature) {}\n  }, {\n    key: \"_editStates\",\n    value: function _editStates(temperature) {\n      for (var elem in elemJSON) {\n        var elemDiv = document.getElementById(elem);\n\n        var phaseState = this._computePhaseState(elem, temperature); //Edit state color\n\n      }\n    }\n  }, {\n    key: \"_computePhaseState\",\n    value: function _computePhaseState(elem, temperature) {\n      if (elem.boilingPoint !== \"unknown\") {\n        if (temperature > elem.boilingPoint) {\n          return \"gas\";\n        }\n      }\n\n      if (elem.meltingPoint !== \"unknown\") {\n        if (temperature < elem.meltingPoint) {\n          return \"solid\";\n        } else {\n          return \"liquid\";\n        }\n      }\n\n      return \"unknown\";\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"temperatureSlider\",\n        type: \"range\",\n        min: \"0\",\n        max: \"6000\",\n        step: \"1\",\n        value: \"0\",\n        onClick: function onClick(event) {\n          return _this._updateAtomicElementStates(\"temperatureSlider\", \"temperatureInput\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        id: \"temperatureInput\",\n        type: \"text\",\n        maxLength: \"4\",\n        onKeyDown: function onKeyDown(event) {\n          return _this._updateAtomicElementStates(\"temperatureInput\", \"temperatureSlider\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return TemperatureSlider;\n}(React.Component);\n\nexport default TemperatureSlider;","map":{"version":3,"sources":["C:\\Users\\alexh\\Desktop\\periodic-table\\src\\TemperatureSlider.js"],"names":["React","elemJSON","require","elementJSON","TemperatureSlider","props","idSource","idTarget","temperature","document","getElementById","value","_checkTemperatureValue","_editStates","elem","elemDiv","phaseState","_computePhaseState","boilingPoint","meltingPoint","event","_updateAtomicElementStates","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,WAAxC;;IAEMC,iB;;;;;AACF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA,0FACTA,KADS;AAElB;;;;+CAE0BC,Q,EAAUC,Q,EAAU;AAC3C,UAAIC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwBJ,QAAxB,EAAkCK,KAApD;;AAEA,UAAIL,QAAQ,KAAK,kBAAjB,EAAqC;AACjC,aAAKM,sBAAL,CAA4BJ,WAA5B;AACH;;AAEDC,MAAAA,QAAQ,CAACC,cAAT,CAAwBH,QAAxB,EAAkCI,KAAlC,GAA0CH,WAA1C;;AACA,WAAKK,WAAL,CAAiBL,WAAjB;AACH;;;2CAEsBA,W,EAAa,CAEnC;;;gCAEWA,W,EAAa;AACrB,WAAK,IAAIM,IAAT,IAAiBb,QAAjB,EAA2B;AACvB,YAAIc,OAAO,GAAGN,QAAQ,CAACC,cAAT,CAAwBI,IAAxB,CAAd;;AACA,YAAIE,UAAU,GAAG,KAAKC,kBAAL,CAAwBH,IAAxB,EAA8BN,WAA9B,CAAjB,CAFuB,CAGvB;;AACH;AACJ;;;uCAEkBM,I,EAAMN,W,EAAa;AAClC,UAAIM,IAAI,CAACI,YAAL,KAAsB,SAA1B,EAAqC;AACjC,YAAIV,WAAW,GAAGM,IAAI,CAACI,YAAvB,EAAqC;AACjC,iBAAO,KAAP;AACH;AACJ;;AAED,UAAIJ,IAAI,CAACK,YAAL,KAAsB,SAA1B,EAAqC;AACjC,YAAIX,WAAW,GAAGM,IAAI,CAACK,YAAvB,EAAqC;AACjC,iBAAO,OAAP;AACH,SAFD,MAGK;AACD,iBAAO,QAAP;AACH;AACJ;;AAED,aAAO,SAAP;AACH;;;6BAEQ;AAAA;;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,EAAE,EAAC,mBAAV;AAA8B,QAAA,IAAI,EAAC,OAAnC;AAA2C,QAAA,GAAG,EAAC,GAA/C;AAAmD,QAAA,GAAG,EAAC,MAAvD;AAA8D,QAAA,IAAI,EAAC,GAAnE;AAAuE,QAAA,KAAK,EAAC,GAA7E;AACI,QAAA,OAAO,EAAE,iBAACC,KAAD;AAAA,iBAAW,KAAI,CAACC,0BAAL,CAAgC,mBAAhC,EAAqD,kBAArD,CAAX;AAAA,SADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAGI;AAAO,QAAA,EAAE,EAAC,kBAAV;AAA6B,QAAA,IAAI,EAAC,MAAlC;AAAyC,QAAA,SAAS,EAAC,GAAnD;AACI,QAAA,SAAS,EAAE,mBAACD,KAAD;AAAA,iBAAW,KAAI,CAACC,0BAAL,CAAgC,kBAAhC,EAAoD,mBAApD,CAAX;AAAA,SADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CADJ,CADJ;AAUH;;;;EA1D2BrB,KAAK,CAACsB,S;;AA6DtC,eAAelB,iBAAf","sourcesContent":["import React from \"react\";\r\n\r\n\r\nvar elemJSON = require(\"./ElementJSON\").elementJSON;\r\n\r\nclass TemperatureSlider extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    _updateAtomicElementStates(idSource, idTarget) {\r\n        let temperature = document.getElementById(idSource).value;\r\n\r\n        if (idSource === \"temperatureInput\") {\r\n            this._checkTemperatureValue(temperature);\r\n        }\r\n\r\n        document.getElementById(idTarget).value = temperature;\r\n        this._editStates(temperature);\r\n    }\r\n\r\n    _checkTemperatureValue(temperature) {\r\n\r\n    }\r\n\r\n    _editStates(temperature) {\r\n        for (let elem in elemJSON) {\r\n            let elemDiv = document.getElementById(elem);\r\n            let phaseState = this._computePhaseState(elem, temperature);\r\n            //Edit state color\r\n        }\r\n    } \r\n\r\n    _computePhaseState(elem, temperature) {\r\n        if (elem.boilingPoint !== \"unknown\") {\r\n            if (temperature > elem.boilingPoint) {\r\n                return \"gas\";\r\n            }\r\n        }\r\n\r\n        if (elem.meltingPoint !== \"unknown\") {\r\n            if (temperature < elem.meltingPoint) {\r\n                return \"solid\";\r\n            }\r\n            else {\r\n                return \"liquid\";\r\n            }\r\n        }\r\n\r\n        return \"unknown\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form>\r\n                    <input id=\"temperatureSlider\" type=\"range\" min=\"0\" max=\"6000\" step=\"1\" value=\"0\"\r\n                        onClick={(event) => this._updateAtomicElementStates(\"temperatureSlider\", \"temperatureInput\")} />\r\n                    <input id=\"temperatureInput\" type=\"text\" maxLength=\"4\"\r\n                        onKeyDown={(event) => this._updateAtomicElementStates(\"temperatureInput\", \"temperatureSlider\")} />\r\n                </form>\r\n            </div>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default TemperatureSlider\r\n"]},"metadata":{},"sourceType":"module"}